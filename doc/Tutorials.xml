<Chapter Label="Tutorials">
<Heading>Getting started using debugger</Heading>

Debugger is a &GAP; package which advanced some advanced debugging
functionality to GAP. It does not replace GAP's builtin break loop,
but provides new ways to access the break loop.<P/>

In this chapter we describe a couple of different uses of debugger.
First, we explain in Section <Ref Sect="Tut:BreakPoint"/> how to 
set breakpoints.<P/>

Then we show in Section <Ref Sect="Tut:CallFunc"/> how to create
a function which will be called every before every line of GAP code.<P/>

<P/>

<Section Label="Tut:BreakPoint">
<Heading>Creating Breakpoints</Heading>

Suppose you want to enter the break loop at a particular line
of your existing code. You could edit your code and add a call to
<Ref Func="Error" BookName="ref"/> at the place where you want to
break, but that requires editing and realoading your code.

Instead, we can use <Ref Func="AddBreakpoint"/>, which lets us
set a filename and line to break at. When this line is reached, &GAP;
will enter the break loop. For example:

<Listing>
AddBreakpoint("mycode.g", 54);
AddBreakpoint("lib/grp.g", 128);
</Listing>

All functions in the debugger package do not require a full filename,
but will instead look for files which end in the passed in string.

Once in the breakloop, we can optionally call
<Ref Func="ClearAllBreakpoints"/> to remove the breakpoint and then
use <Code>return;</Code> to continue execution.

Like in standard debuggers, while in the break loop we can use the
functions <Ref Func="BreakNextLine"/>,
<Ref Func="BreakNextEnterFunction"/> and
<Ref Func="BreakNextLeaveFunction"/> to re-enter the break loop at
the next line, next time we enter a function or next time we leave a
function.

</Section>

<Section Label="Tut:CallFunc">
<Heading>Calling Functions</Heading>

Instead of entering the break loop, we can instead call a function
when a particular line is reached, or after every line. Each function
in the debugger package optionally takes a function to be called, instead
of entering the break loop.

For example, consider that we want to find exactly which part of GAP
sets the size of a group <Code>G</Code>. We can call:

<Listing>
func := function(file,line)
  if HasSize(G) then Error("Size set!); fi;
end;
BreakEveryLine(func);
</Listing>

This will call <Code>func</Code> before every line of GAP code is
executed, entering the break loop when the size of <Code>G</Code> is
set.
</Section>

</Chapter>
